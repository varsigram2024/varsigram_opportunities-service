name: Deploy Microservice

on:
  push:
    branches:
      - develop  # Triggers staging deployment
      - main     # Triggers production deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "port=3002" >> $GITHUB_OUTPUT
            echo "app_dir=/var/www/opportunity-service/prod" >> $GITHUB_OUTPUT
            echo "pm2_name=opp-prod" >> $GITHUB_OUTPUT
            echo "branch=main" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "port=3001" >> $GITHUB_OUTPUT
            echo "app_dir=/var/www/opportunity-service/staging" >> $GITHUB_OUTPUT
            echo "pm2_name=opp-staging" >> $GITHUB_OUTPUT
            echo "branch=develop" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        env:
          ENV_CONTENT: ${{ steps.env.outputs.environment == 'production' && secrets.ENV_PRODUCTION || secrets.ENV_STAGING }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          envs: ENV_CONTENT
          script_stop: true
          command_timeout: 30m
          script: |
            set -e
            
            APP_DIR="${{ steps.env.outputs.app_dir }}"
            PM2_NAME="${{ steps.env.outputs.pm2_name }}"
            BRANCH="${{ steps.env.outputs.branch }}"
            ENVIRONMENT="${{ steps.env.outputs.environment }}"
            
            echo "=========================================="
            echo "üöÄ Starting Deployment"
            echo "Environment: $ENVIRONMENT"
            echo "Branch: $BRANCH"
            echo "App Directory: $APP_DIR"
            echo "PM2 Name: $PM2_NAME"
            echo "Time: $(date)"
            echo "=========================================="
            
            # Verify required tools
            echo "üîç Verifying system requirements..."
            node --version || { echo "‚ùå Node.js not installed"; exit 1; }
            npm --version || { echo "‚ùå npm not installed"; exit 1; }
            pm2 --version || { echo "‚ùå PM2 not installed"; exit 1; }
            git --version || { echo "‚ùå Git not installed"; exit 1; }
            echo "‚úÖ All required tools are installed"
            
            # Create directory if it doesn't exist
            echo "üìÅ Preparing directory..."
            mkdir -p $APP_DIR
            cd $APP_DIR
            echo "‚úÖ Working directory: $(pwd)"
            
            # Clone or pull latest code
            if [ -d ".git" ]; then
              echo "üì• Pulling latest changes from $BRANCH branch..."
              git fetch origin
              git reset --hard origin/$BRANCH
              git clean -fd
              echo "‚úÖ Code updated successfully"
            else
              echo "üì• Cloning repository (branch: $BRANCH)..."
              git clone -b $BRANCH https://github.com/varsigram2024/varsigram_opportunities-service.git .
              echo "‚úÖ Repository cloned successfully"
            fi
            
            # Show current commit
            echo "üìù Deployed commit:"
            git log -1 --pretty=format:"%h - %an, %ar : %s"
            echo ""
            
            # Create .env file
            echo "‚öôÔ∏è  Creating environment file..."
            echo "$ENV_CONTENT" > .env
            echo "‚úÖ .env file created"
            
            # Install dependencies
            echo "üì¶ Installing dependencies..."
            if [ -f "package-lock.json" ]; then
              echo "Using npm ci (clean install)..."
              npm ci --omit=dev
            else
              echo "‚ö†Ô∏è  Warning: package-lock.json not found"
              echo "Using npm install instead..."
              npm install --omit=dev
            fi
            echo "‚úÖ Dependencies installed"
            
            # Create logs directory
            mkdir -p logs
            
            # Run database migrations if migration script exists
            if grep -q '"migrate"' package.json 2>/dev/null; then
              echo "üóÑÔ∏è  Running database migrations..."
              npm run migrate || echo "‚ö†Ô∏è  Migration script failed or not needed"
            fi
            
            # Restart PM2 process
            echo "üîÑ Managing PM2 process: $PM2_NAME"
            if pm2 describe $PM2_NAME > /dev/null 2>&1; then
              echo "Restarting existing process..."
              pm2 restart $PM2_NAME --update-env
              echo "‚úÖ Process restarted"
            else
              echo "Starting new process..."
              pm2 start npm --name $PM2_NAME -- start
              echo "‚úÖ New process started"
            fi
            
            # Save PM2 configuration
            pm2 save --force
            
            echo "=========================================="
            echo "‚úÖ Deployment Completed Successfully!"
            echo "=========================================="
            
            # Show PM2 status
            echo ""
            echo "üìä Current PM2 Processes:"
            pm2 list
            
            echo ""
            echo "üìã Recent Logs (last 15 lines):"
            pm2 logs $PM2_NAME --lines 15 --nostream || echo "No logs available yet"
            
            echo ""
            echo "üéâ Deployment finished at $(date)"

      - name: Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment to ${{ steps.env.outputs.environment }} successful!"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
          else
            echo "‚ùå Deployment to ${{ steps.env.outputs.environment }} failed!"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
            exit 1
          fi