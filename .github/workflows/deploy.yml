name: Deploy Microservice

on:
  push:
    branches:
      - develop  # Triggers staging deployment
      - main     # Triggers production deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "port=3002" >> $GITHUB_OUTPUT
            echo "app_dir=/var/www/opportunity-service/prod/" >> $GITHUB_OUTPUT
            echo "pm2_name=opp-prod" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "port=3001" >> $GITHUB_OUTPUT
            echo "app_dir=/var/www/opportunity-service/staging/" >> $GITHUB_OUTPUT
            echo "pm2_name=opp-staging" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        env:
          ENV_CONTENT: ${{ steps.env.outputs.environment == 'production' && secrets.ENV_PRODUCTION || secrets.ENV_STAGING }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          envs: ENV_CONTENT
          script: |
            set -e
            
            APP_DIR="${{ steps.env.outputs.app_dir }}"
            PM2_NAME="${{ steps.env.outputs.pm2_name }}"
            BRANCH="${{ github.ref_name }}"
            
            echo "Deploying ${{ steps.env.outputs.environment }} environment..."
            
            # Create directory if it doesn't exist
            mkdir -p $APP_DIR
            
            # Navigate to app directory
            cd $APP_DIR
            
            # Clone or pull latest code
            if [ -d ".git" ]; then
              echo "Pulling latest changes..."
              git fetch origin
              git reset --hard origin/$BRANCH
            else
              echo "Cloning repository..."
              git clone -b $BRANCH https://github.com/varsigram2024/varsigram_opportunities-service.git .
            fi
            
            # Create .env file
            echo "Creating .env file..."
            echo "$ENV_CONTENT" > .env
            
            # Install dependencies
            echo "Installing dependencies..."
            npm ci --production
            
            # Run database migrations if needed
            # npm run migrate
            
            # Restart PM2 process
            echo "Restarting PM2 process..."
            if pm2 describe $PM2_NAME > /dev/null 2>&1; then
              pm2 restart $PM2_NAME
            else
              pm2 start npm --name $PM2_NAME -- start
            fi
            
            # Save PM2 configuration
            pm2 save
            
            echo "Deployment completed successfully!"
            pm2 status

      - name: Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment to ${{ steps.env.outputs.environment }} successful!"
          else
            echo "❌ Deployment to ${{ steps.env.outputs.environment }} failed!"
            exit 1
          fi